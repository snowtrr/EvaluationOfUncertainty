using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace VBO_runner
{
    /// <summary>
    /// Class for generate input files after work logNormal application
    /// </summary>
    public class GenerateInput
    {
        #region Properties

        /// <summary>
        /// Path to parent directory of folders generated by VBO
        /// </summary>
        public string autoResParentPath { get; private set; }

        /// <summary>
        /// Path to parent path of input files
        /// </summary>
        public string inputParentPath { get; private set; }

        #endregion Properties

        /// <summary>
        /// Generate folder with input files for VBO by using dat files
        /// </summary>
        /// <param name="fullPathInput">Path to standart input file</param>
        /// <param name="fullPathDataFolder">Path to folder wich contains generated folders with dat files</param>
        public bool Generate(string fullPathInput, string fullPathDataFolder)
        {
            // File and directory for comfort work with it
            var fileInfo = new FileInfo(fullPathInput);
            var directoryInfo = new DirectoryInfo(fullPathDataFolder);

            // Gets content of file and folder
            var directoryContent = Directory.GetDirectories(directoryInfo.FullName);
            var fileContent = File.ReadAllLines(fileInfo.FullName);

            this.autoResParentPath = Path.Combine(fileInfo.Directory.FullName, "Auto");

            // Generate for each directory file input
            foreach (var dir in directoryContent)
            {
                // New conten field and path of RES
                var newFileContent = new List<string>();
                var saveResPath = Path.Combine(fileInfo.Directory.FullName, "Auto", (dir.Split('\\')).Last());

                // Check and fix lines
                foreach (var line in fileContent)
                {
                    if (line.Contains("SaveResPath"))
                    {
                        newFileContent.Add(string.Format("SaveResPath = \"{0}\"", saveResPath));
                    }
                    else if (line.Contains("SigmasPath"))
                    {
                        var newLine = (line.Split('\\')).Last();
                        var newPath = Path.Combine(dir, newLine.Trim(new char[] {'"'}));
                        newFileContent.Add(string.Format("SigmasPath = \"{0}\"", newPath));
                    }
                    else
                    {
                        newFileContent.Add(line);
                    }
                }

                // WriteContent
                var outputPath = Path.Combine(fileInfo.Directory.FullName, "InputFolder");
                this.inputParentPath = outputPath;
                Directory.CreateDirectory(outputPath);
                var fullFileName = Path.Combine(outputPath, "inputFor" + (dir.Split('\\')).Last());
                File.WriteAllLines(fullFileName, newFileContent);
            }

            return true;
        }
    }
}